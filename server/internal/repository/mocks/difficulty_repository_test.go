// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import entity "codeview/internal/entity"
import mock "github.com/stretchr/testify/mock"
import pagination "codeview/internal/util/pagination"

// DifficultyRepository is an autogenerated mock type for the DifficultyRepository type
type DifficultyRepository struct {
	mock.Mock
}

// CreateDifficulty provides a mock function with given fields: ctx, body
func (_m *DifficultyRepository) CreateDifficulty(ctx context.Context, body *entity.Difficulty) (*entity.Difficulty, error) {
	ret := _m.Called(ctx, body)

	var r0 *entity.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Difficulty) *entity.Difficulty); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Difficulty) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDifficultyById provides a mock function with given fields: ctx, id
func (_m *DifficultyRepository) DeleteDifficultyById(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDifficulties provides a mock function with given fields: ctx, p
func (_m *DifficultyRepository) GetDifficulties(ctx context.Context, p *pagination.Pagination) ([]entity.Difficulty, error) {
	ret := _m.Called(ctx, p)

	var r0 []entity.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) []entity.Difficulty); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDifficultiesByIds provides a mock function with given fields: ctx, ids, p
func (_m *DifficultyRepository) GetDifficultiesByIds(ctx context.Context, ids []uint, p *pagination.Pagination) ([]entity.Difficulty, error) {
	ret := _m.Called(ctx, ids, p)

	var r0 []entity.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, []uint, *pagination.Pagination) []entity.Difficulty); ok {
		r0 = rf(ctx, ids, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uint, *pagination.Pagination) error); ok {
		r1 = rf(ctx, ids, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDifficultyById provides a mock function with given fields: ctx, id
func (_m *DifficultyRepository) GetDifficultyById(ctx context.Context, id uint) (*entity.Difficulty, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Difficulty); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDifficultyById provides a mock function with given fields: ctx, id, body
func (_m *DifficultyRepository) UpdateDifficultyById(ctx context.Context, id uint, body *entity.Difficulty) (*entity.Difficulty, error) {
	ret := _m.Called(ctx, id, body)

	var r0 *entity.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, uint, *entity.Difficulty) *entity.Difficulty); ok {
		r0 = rf(ctx, id, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, *entity.Difficulty) error); ok {
		r1 = rf(ctx, id, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

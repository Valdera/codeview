// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import entity "codeview/internal/entity"
import mock "github.com/stretchr/testify/mock"
import pagination "codeview/internal/util/pagination"

// SolutionRepository is an autogenerated mock type for the SolutionRepository type
type SolutionRepository struct {
	mock.Mock
}

// CreateSolution provides a mock function with given fields: ctx, body
func (_m *SolutionRepository) CreateSolution(ctx context.Context, body *entity.Solution) (*entity.Solution, error) {
	ret := _m.Called(ctx, body)

	var r0 *entity.Solution
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Solution) *entity.Solution); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Solution) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSolutionById provides a mock function with given fields: ctx, id
func (_m *SolutionRepository) DeleteSolutionById(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSolutionById provides a mock function with given fields: ctx, id
func (_m *SolutionRepository) GetSolutionById(ctx context.Context, id uint) (*entity.Solution, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Solution
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Solution); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolutions provides a mock function with given fields: ctx, p
func (_m *SolutionRepository) GetSolutions(ctx context.Context, p *pagination.Pagination) ([]entity.Solution, error) {
	ret := _m.Called(ctx, p)

	var r0 []entity.Solution
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) []entity.Solution); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolutionsByIds provides a mock function with given fields: ctx, ids, p
func (_m *SolutionRepository) GetSolutionsByIds(ctx context.Context, ids []uint, p *pagination.Pagination) ([]entity.Solution, error) {
	ret := _m.Called(ctx, ids, p)

	var r0 []entity.Solution
	if rf, ok := ret.Get(0).(func(context.Context, []uint, *pagination.Pagination) []entity.Solution); ok {
		r0 = rf(ctx, ids, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uint, *pagination.Pagination) error); ok {
		r1 = rf(ctx, ids, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSolutionById provides a mock function with given fields: ctx, id, body
func (_m *SolutionRepository) UpdateSolutionById(ctx context.Context, id uint, body *entity.Solution) (*entity.Solution, error) {
	ret := _m.Called(ctx, id, body)

	var r0 *entity.Solution
	if rf, ok := ret.Get(0).(func(context.Context, uint, *entity.Solution) *entity.Solution); ok {
		r0 = rf(ctx, id, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, *entity.Solution) error); ok {
		r1 = rf(ctx, id, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

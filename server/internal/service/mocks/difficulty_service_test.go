// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import pagination "codeview/internal/util/pagination"
import request "codeview/internal/dto/request"
import response "codeview/internal/dto/response"

// DifficultyService is an autogenerated mock type for the DifficultyService type
type DifficultyService struct {
	mock.Mock
}

// CreateDifficulty provides a mock function with given fields: ctx, req
func (_m *DifficultyService) CreateDifficulty(ctx context.Context, req *request.DifficultyCreate) (*response.Difficulty, error) {
	ret := _m.Called(ctx, req)

	var r0 *response.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, *request.DifficultyCreate) *response.Difficulty); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *request.DifficultyCreate) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDifficultyById provides a mock function with given fields: ctx, id
func (_m *DifficultyService) DeleteDifficultyById(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDifficulties provides a mock function with given fields: ctx, p
func (_m *DifficultyService) GetDifficulties(ctx context.Context, p *pagination.Pagination) ([]response.Difficulty, error) {
	ret := _m.Called(ctx, p)

	var r0 []response.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) []response.Difficulty); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDifficultiesByIds provides a mock function with given fields: ctx, ids, p
func (_m *DifficultyService) GetDifficultiesByIds(ctx context.Context, ids []uint, p *pagination.Pagination) ([]response.Difficulty, error) {
	ret := _m.Called(ctx, ids, p)

	var r0 []response.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, []uint, *pagination.Pagination) []response.Difficulty); ok {
		r0 = rf(ctx, ids, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uint, *pagination.Pagination) error); ok {
		r1 = rf(ctx, ids, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDifficultyById provides a mock function with given fields: ctx, id
func (_m *DifficultyService) GetDifficultyById(ctx context.Context, id uint) (*response.Difficulty, error) {
	ret := _m.Called(ctx, id)

	var r0 *response.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, uint) *response.Difficulty); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDifficultyById provides a mock function with given fields: ctx, id, body
func (_m *DifficultyService) UpdateDifficultyById(ctx context.Context, id uint, body *request.DifficultyUpdate) (*response.Difficulty, error) {
	ret := _m.Called(ctx, id, body)

	var r0 *response.Difficulty
	if rf, ok := ret.Get(0).(func(context.Context, uint, *request.DifficultyUpdate) *response.Difficulty); ok {
		r0 = rf(ctx, id, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Difficulty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, *request.DifficultyUpdate) error); ok {
		r1 = rf(ctx, id, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import pagination "codeview/internal/util/pagination"
import request "codeview/internal/dto/request"
import response "codeview/internal/dto/response"

// SolutionService is an autogenerated mock type for the SolutionService type
type SolutionService struct {
	mock.Mock
}

// CreateSolution provides a mock function with given fields: ctx, req
func (_m *SolutionService) CreateSolution(ctx context.Context, req *request.SolutionCreate) (*response.Solution, error) {
	ret := _m.Called(ctx, req)

	var r0 *response.Solution
	if rf, ok := ret.Get(0).(func(context.Context, *request.SolutionCreate) *response.Solution); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *request.SolutionCreate) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSolutionById provides a mock function with given fields: ctx, id
func (_m *SolutionService) DeleteSolutionById(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSolutionById provides a mock function with given fields: ctx, id
func (_m *SolutionService) GetSolutionById(ctx context.Context, id uint) (*response.Solution, error) {
	ret := _m.Called(ctx, id)

	var r0 *response.Solution
	if rf, ok := ret.Get(0).(func(context.Context, uint) *response.Solution); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolutions provides a mock function with given fields: ctx, p
func (_m *SolutionService) GetSolutions(ctx context.Context, p *pagination.Pagination) ([]response.Solution, error) {
	ret := _m.Called(ctx, p)

	var r0 []response.Solution
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) []response.Solution); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolutionsByIds provides a mock function with given fields: ctx, ids, p
func (_m *SolutionService) GetSolutionsByIds(ctx context.Context, ids []uint, p *pagination.Pagination) ([]response.Solution, error) {
	ret := _m.Called(ctx, ids, p)

	var r0 []response.Solution
	if rf, ok := ret.Get(0).(func(context.Context, []uint, *pagination.Pagination) []response.Solution); ok {
		r0 = rf(ctx, ids, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uint, *pagination.Pagination) error); ok {
		r1 = rf(ctx, ids, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSolutionById provides a mock function with given fields: ctx, id, body
func (_m *SolutionService) UpdateSolutionById(ctx context.Context, id uint, body *request.SolutionUpdate) (*response.Solution, error) {
	ret := _m.Called(ctx, id, body)

	var r0 *response.Solution
	if rf, ok := ret.Get(0).(func(context.Context, uint, *request.SolutionUpdate) *response.Solution); ok {
		r0 = rf(ctx, id, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Solution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, *request.SolutionUpdate) error); ok {
		r1 = rf(ctx, id, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
